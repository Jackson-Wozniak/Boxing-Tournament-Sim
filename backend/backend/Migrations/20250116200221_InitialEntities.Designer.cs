// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using backend.Data;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(TournamentDbContext))]
    [Migration("20250116200221_InitialEntities")]
    partial class InitialEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("backend.Entities.Fighter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Fighters");
                });

            modelBuilder.Entity("backend.Entities.Matchup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("FighterOneId")
                        .HasColumnType("bigint");

                    b.Property<long>("FighterTwoId")
                        .HasColumnType("bigint");

                    b.Property<int>("Round")
                        .HasColumnType("int");

                    b.Property<string>("TournamentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("FighterOneId");

                    b.HasIndex("FighterTwoId");

                    b.HasIndex("Round", "TournamentName");

                    b.ToTable("Matchups");
                });

            modelBuilder.Entity("backend.Entities.Tournament", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("FighterCount")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("backend.Entities.TournamentRound", b =>
                {
                    b.Property<int>("Round")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("TournamentName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnOrder(0);

                    b.HasKey("Round", "TournamentName");

                    b.HasIndex("TournamentName");

                    b.ToTable("TournamentRounds");
                });

            modelBuilder.Entity("backend.Entities.Fighter", b =>
                {
                    b.OwnsOne("backend.Entities.Attributes", "Attributes", b1 =>
                        {
                            b1.Property<long>("FighterId")
                                .HasColumnType("bigint");

                            b1.Property<int>("Defense")
                                .HasColumnType("int");

                            b1.Property<int>("Offense")
                                .HasColumnType("int");

                            b1.Property<int>("Power")
                                .HasColumnType("int");

                            b1.HasKey("FighterId");

                            b1.ToTable("Fighters");

                            b1.WithOwner()
                                .HasForeignKey("FighterId");
                        });

                    b.Navigation("Attributes")
                        .IsRequired();
                });

            modelBuilder.Entity("backend.Entities.Matchup", b =>
                {
                    b.HasOne("backend.Entities.Fighter", "FighterOne")
                        .WithMany()
                        .HasForeignKey("FighterOneId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend.Entities.Fighter", "FighterTwo")
                        .WithMany()
                        .HasForeignKey("FighterTwoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("backend.Entities.TournamentRound", "TournamentRound")
                        .WithMany("Matchups")
                        .HasForeignKey("Round", "TournamentName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FighterOne");

                    b.Navigation("FighterTwo");

                    b.Navigation("TournamentRound");
                });

            modelBuilder.Entity("backend.Entities.TournamentRound", b =>
                {
                    b.HasOne("backend.Entities.Tournament", "Tournament")
                        .WithMany("TournamentRounds")
                        .HasForeignKey("TournamentName")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("backend.Entities.Tournament", b =>
                {
                    b.Navigation("TournamentRounds");
                });

            modelBuilder.Entity("backend.Entities.TournamentRound", b =>
                {
                    b.Navigation("Matchups");
                });
#pragma warning restore 612, 618
        }
    }
}
